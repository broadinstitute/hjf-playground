name: 'Terraform Deploy Test - gotc-monitoring'
env:
  terraform_directory: "deploy/gotc-monitoring/terraform"
  terraform_version: "0.14.5"
on:
  pull_request:
    branches:
      - master
    paths:
      - deploy/gotc-monitoring/terraform/**

jobs:
  terraform_plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.terraform_directory }}

    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Fetch Creds from Vault - gcloud auth"
      env:
        ROLE_ID: ${{ secrets.ROLE_ID }}
        SECRET_ID: ${{ secrets.SECRET_ID }}
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      run: |
        # get vault token using role-id and secret-id
        VAULT_TOKEN=$(curl \
            --request POST \
            --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
        if [ -z "${VAULT_TOKEN}" ] ; then
           echo "Vault authentication failed!"
           exit 1
        fi
        echo ::add-mask::${VAULT_TOKEN}
        echo "VAULT_TOKEN=${VAULT_TOKEN}" >> $GITHUB_ENV
        # use vault token to read secret - service account json
        curl --silent -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
             ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/ci/ci-non-prod-service-account.json \
             | jq .data > sa.json
        if [ ! -s sa.json ] ; then
           echo "Retrieval of Gcloud SA credentials failed"
           exit 1
        fi
        ls -al sa.json
        # auth as service account
        gcloud auth activate-service-account --key-file=sa.json
        if [ $? -ne 0 ] ; then
           echo "Gcloud auth failed!"
           exit 1
        fi
        # get bearer token and set it to a specific env var that
        #   subsequent steps expect.  bearer token good for 1 hour
        GOOGLE_OAUTH_ACCESS_TOKEN=$(gcloud auth print-access-token)
        if [ -z "${GOOGLE_OAUTH_ACCESS_TOKEN}" ] ; then
           echo "Generating Gcloud access token failed"
           exit 1
        fi
        echo ::add-mask::${GOOGLE_OAUTH_ACCESS_TOKEN}
        echo "GOOGLE_OAUTH_ACCESS_TOKEN=${GOOGLE_OAUTH_ACCESS_TOKEN}" >> $GITHUB_ENV

    - name: "Setup Terraform environment"
      uses: hashicorp/setup-terraform@v1.2.1
      with:
          terraform_version: ${{ env.terraform_version }}

    - name: "Terraform fmt"
      run: terraform fmt -check -no-color
      continue-on-error: true

    - name: "Terraform init"
      run: terraform init

    - name: "Terraform validate"
      run: terraform validate -no-color
      continue-on-error: true

    - name: "Terraform plan"
      id: plan
      run: TF_LOG=DEBUG; terraform plan -input=false -no-color
      
