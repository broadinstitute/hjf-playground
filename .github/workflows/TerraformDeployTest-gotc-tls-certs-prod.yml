name: Terraform Deploy Test - gotc-tls-certs-prod

env:
  terraform_directory: "deploy/gotc-tls-certs-prod/terraform"
  terraform_version: "0.12.20"

on:
  pull_request:
    branches: 
      - master
    paths:
      - deploy/gotc-tls-certs-prod/terraform/**
    
jobs:
  terraform_plan_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Get secret from vault
    - name: Authenticate to Gcloud
      id: gcloud
      env:
        ROLE_ID: ${{ secrets.ROLE_ID }}
        SECRET_ID: ${{ secrets.SECRET_ID }}
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      run: |
        # get vault token using role-id and secret-id
        VAULT_TOKEN=$(curl \
            --request POST \
            --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
        if [ -z "${VAULT_TOKEN}" ] ; then
           echo "Vault authentication failed!" 
           exit 1
        fi
        echo ::add-mask::${VAULT_TOKEN}
        echo ::set-env name=VAULT_TOKEN::${VAULT_TOKEN}
        # use vault token to read secret - service account json
        curl --silent -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
             ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/ci/ci-non-prod-service-account.json \
             | jq .data > sa.json
        if [ ! -s sa.json ] ; then
           echo "Retrieval of Gcloud SA credentials failed" 
           exit 1
        fi
        # auth as service account
        gcloud auth activate-service-account --key-file=sa.json
        if [ $? -ne 0 ] ; then
           echo "Gcloud auth failed!"
           exit 1
        fi
        # get bearer token and set it to a specific env var that 
        #   subsequent steps expect.  bearer token good for 1 hour
        GOOGLE_OAUTH_ACCESS_TOKEN=$(gcloud auth print-access-token)
        if [ -z "${GOOGLE_OAUTH_ACCESS_TOKEN}" ] ; then
           echo "Generating Gcloud access token failed"
           exit 1
        fi
        echo ::add-mask::${GOOGLE_OAUTH_ACCESS_TOKEN}
        echo ::set-env name=GOOGLE_OAUTH_ACCESS_TOKEN::${GOOGLE_OAUTH_ACCESS_TOKEN}

    # Render any template files
    # NOTE: want to render templates before fmt so that any rendered TF files have their
    #  format verfied
    # DEST_PATH needs to be how the docker container sees the files and github actions
    #  automatically mounts runner workspace under /github/workspace.
    # NOTE: github actions automatically passes in all env vars set by github or in your
    #   action steps on the docker run line so you do not have to list them here.
    #   ex: VAULT_TOKEN is set as an env var in a previous step so it will automatically
    #     be passed to the github-action-template-render docker
    - name: render template
      uses: broadinstitute/github-action-template-render@v0.1.1
      env:
        DEST_PATH: /github/workspace/${{ env.terraform_directory }}

    # Run Terraform fmt (kind of a linter)
    - name: Terraform format check
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'fmt'
        tf_actions_fmt_write: false
        tf_actions_comment: true
        tf_actions_working_dir: ${{ env.terraform_directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Run Terraform init 
    - name: Terraform init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'init'
        tf_actions_comment: true
        tf_actions_working_dir: ${{ env.terraform_directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Run Terraform validate 
    - name: Terraform validate
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'validate'
        tf_actions_comment: true
        tf_actions_working_dir: ${{ env.terraform_directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Run Terraform plan 
    - name: Terraform plan
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'plan'
        tf_actions_comment: true
        tf_actions_working_dir: ${{ env.terraform_directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_CLI_ARGS: -lock=false

