name: Helm Charts Release

# This Github action is broken into two dependent jobs. 
# First job (package-charts):
#    - creates the helm chart packages for updated charts from the source git repository
#    - create the new index.yaml file with updated chart versions required for the helm repo
# Second job (update-helm-repo)
#    - pushes the updated index.yaml file to helm repo git repostiory github pages site
#
# Breaking this action into two jobs allows each job to checkout the git repository
#  associated with either the source code for the charts or the repository that hosts the
#  github pages

# Linting is not performed as part of the release since the PR job performs this process

# This action only releases charts who has had any changed files under the directory for
#  that chart (be it update, additions or deletions)

on:
  push:
    branches:
      - master
    paths:
      - helm/**

jobs:
  package-charts:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Get github Personal access token secret for the dsdejenkins user from vault
    - name: RetrieveToken
      id: Token
      env:
        ROLE_ID: ${{ secrets.ROLE_ID }}
        SECRET_ID: ${{ secrets.SECRET_ID }}
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      run: |
        # get vault token using role-id and secret-id
        VAULT_TOKEN=$(curl \
            --request POST \
            --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
        if [ -z "${VAULT_TOKEN}" ] ; then
           echo "Vault authentication failed!"
           exit 1
        fi
        echo ::add-mask::${VAULT_TOKEN}
        echo ::set-env name=VAULT_TOKEN::${VAULT_TOKEN}
        # use vault token to read secret - api access token
        CR_TOKEN=$(curl --silent \
             -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
             ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/dsde-jenkins/api-access-token \
             | jq .data.token | tr -d \")
        if [ -z "${CR_TOKEN}" ] ; then
           echo "Retrieval of api access token failed"
           exit 1
        fi
        echo ::add-mask::${CR_TOKEN}
        echo ::set-env name=CR_TOKEN::${CR_TOKEN}
        # add token to cr.yaml file
        echo "token: ${CR_TOKEN}" >> helm/cr.yaml

    # Get list of files changed as part of this merge
    - name: Get changed files
      id: changed-files
      uses: lots0logs/gh-action-get-changed-files@2.1.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    # process changed file list for any changes to helm charts under the helm directory
    - name: Create Chart list from changed files
      run: |
         # process list of changed files
         changed_files=$(echo "${{ steps.changed-files.outputs.all }}" | tr -d '[|]' | sed -e 's;,; ;g')
         chartlist=()
         # for each file see if it part of a helm chart
         for file in ${changed_files}
         do
            if echo $file | grep -qE "^helm/"
            then
               # file under helm directory get subdir name
               subdir=$(echo $file | cut -d '/' -f2)
               # ignore certain files
               if [[ "${subdir}" != "ct.yaml" && "${subdir}" != "cr.yaml.ctmpl" ]]
               then
                  # check if we seen this subdir before
                  if [[ ! " ${chartlist[@]} " =~ " ${subdir} " ]]
                  then
                      # add to changed chart list
                      chartlist+=( "${subdir}" )
                  fi
               fi
           fi
         done
         # write to file
         echo "${chartlist[@]}" > changed-charts.txt
         echo "The following charts have updates:"
         cat changed-charts.txt

    # by archiving the list of updated charts allows second job access to the list
    - name: archive changed chart list
      uses: actions/upload-artifact@v2
      with:
        name: changed-charts
        path: changed-charts.txt

    - name: Create Chart packages
      run: |
        # mkdir whwere chart packages will be stored
        CHART_TMPDIR=$(mktemp -d charts.XXXXXX)
        echo ::set-env name=CHART_TMPDIR::${CHART_TMPDIR}
        #
        cat changed-charts.txt
        # for each updated chart create package
        for chart in $(cat changed-charts.txt)
        do
          echo "Creating package for chart: (${chart})..."
          # use helm to create package
          helm package helm/${chart} --destination ${CHART_TMPDIR}
        done

    # Create the new chart package tarballs upload to helm repo site and create updated index.yaml
    - name: Upload Charts and create index.yaml
      run: |
        # upload new charts to repo
        CHART_TMPDIR="${{ env.CHART_TMPDIR }}"
        # need a tmp dir for new index.yaml
        INDEX_TMPDIR=$(mktemp -d index.XXXXXX)
        echo ::set-env name=INDEX_TMPDIR::${INDEX_TMPDIR}
        if [ "$(ls -A "${CHART_TMPDIR}")" ]
        then
           # dir is not empty so there are charts to upload
           docker run --rm -v ${PWD}/helm/cr.yaml:/cr.yaml -v ${PWD}/${CHART_TMPDIR}:/deploy  quay.io/helmpack/chart-releaser:v0.2.3 cr upload --package-path /deploy --config /cr.yaml
         fi

         # create a new index.yaml for chart repo
         # NOTE: even if there are no chart packages the following command will create 
         #  an index.yaml.  It will just what is currently at the helm repo
         docker run --rm  -v ${PWD}/helm/cr.yaml:/cr.yaml -v ${PWD}/${CHART_TMPDIR}:/deploy -v ${PWD}/${INDEX_TMPDIR}:/index quay.io/helmpack/chart-releaser:v0.2.3 cr index --package-path /deploy --index-path /index/index.yaml --config /cr.yaml

    # archive updated index.yaml file so second job has access to updated file          
    - name: archive new index.yaml
      uses: actions/upload-artifact@v2
      with:
        name: chart-index
        path: ${{ env.INDEX_TMPDIR }}/index.yaml

  # JOB 2 - update github pages with updated index.yaml    
  update-helm-repo:
    runs-on: ubuntu-latest
    needs: package-charts
    steps:

    # Get github Personal access token secret for the dsdejenkins user from vault
    - name: RetrieveToken
      id: Token
      env:
        ROLE_ID: ${{ secrets.ROLE_ID }}
        SECRET_ID: ${{ secrets.SECRET_ID }}
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      run: |
        # get vault token using role-id and secret-id
        VAULT_TOKEN=$(curl \
            --request POST \
            --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
        if [ -z "${VAULT_TOKEN}" ] ; then
           echo "Vault authentication failed!"
           exit 1
        fi
        echo ::add-mask::${VAULT_TOKEN}
        echo ::set-env name=VAULT_TOKEN::${VAULT_TOKEN}
        # use vault token to read secret - api access token
        CR_TOKEN=$(curl --silent \
             -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
             ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/dsde-jenkins/api-access-token \
             | jq .data.token | tr -d \")
        if [ -z "${CR_TOKEN}" ] ; then
           echo "Retrieval of api access token failed"
           exit 1
        fi
        echo ::add-mask::${CR_TOKEN}
        echo ::set-env name=CR_TOKEN::${CR_TOKEN}

    # use jenkins personal access token to checkout helm repository
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: broadinstitute/gotc-helm-repo
        token: ${{ env.CR_TOKEN }}
        ref: gh-pages

    # download updated index.yaml
    - name: download index.yaml
      uses: actions/download-artifact@v2
      with:
        name: chart-index

    # download list of charts updated used for better git comments
    - name: download changed chart list
      uses: actions/download-artifact@v2
      with:
        name: changed-charts

    # need to configure git so that git operations work
    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    # update github pages
    - name: Git update
      run: |
        # create commit message based on changed chart list
        COMMIT_MSG="Release charts: $(cat changed-charts.txt)"
        # add updated index.yaml
        git add index.yaml
        # commit changes
        git commit -m "${COMMIT_MSG}" 
        # push changes
        git push origin gh-pages
