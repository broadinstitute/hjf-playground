name: 'App2 - Terraform PR Test'
env:
  terraform_directory: "./ap/app2/terraform"
  terraform_version: "0.14.8"
on:
  pull_request:
    paths:
      - '.github/workflows/terraformPrPlan.yml'
      - 'ap/app2/terraform/**'
jobs:
  app2-tests:
    timeout-minutes: 30
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-tests')"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: install terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ env.terraform_version }}

    - name: Gcloud auth
      id: gcloud
      env:
        AP_READONLY_SA: ${{ secrets.AP_READONLY_SA }}
      run: |
        echo "${AP_READONLY_SA}" > sa.json
        # auth as service account
        gcloud auth activate-service-account --key-file=sa.json
        if [ $? -ne 0 ] ; then
           echo "Gcloud auth failed!"
           exit 1
        fi
        # get bearer token and set it to a specific env var that
        #   subsequent steps expect.  bearer token good for 1 hour
        GOOGLE_OAUTH_ACCESS_TOKEN=$(gcloud auth print-access-token)
        if [ -z "${GOOGLE_OAUTH_ACCESS_TOKEN}" ] ; then
           echo "Generating Gcloud access token failed"
           exit 1
        fi
        echo ::add-mask::${GOOGLE_OAUTH_ACCESS_TOKEN}
        echo "GOOGLE_OAUTH_ACCESS_TOKEN=${GOOGLE_OAUTH_ACCESS_TOKEN}" >> $GITHUB_ENV

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: ${{ env.terraform_directory }}
      continue-on-error: true

    - name: "Terraform Init"
      id: init
      run: terraform init -no-color -lock=false
      working-directory: ${{ env.terraform_directory }}
      continue-on-error: true

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ env.terraform_directory }}
      continue-on-error: true

    - name: "Terraform Plan"
      id: plan
      run: terraform plan -lock=false -no-color
      working-directory: ${{ env.terraform_directory }}
      continue-on-error: true

    - name: Outputs
      uses: actions/github-script@3.1.1
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.terraform_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createReviewComment({
            pull_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      
